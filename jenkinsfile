pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                // Install dependencies and build artifact
                bat 'npm install'
                bat 'npm run build'
                
                // Create artifact (e.g., ZIP, JAR, Docker image, etc.)
                archiveArtifacts artifacts: '**/*', fingerprint: true
            }
        }
        
        stage('Test') {
            steps {
                // Run automated tests
                bat 'npm test'
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SONAR_SCANNER_HOME = tool 'SonarQube_Scanner'
            }
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    bat "${env.SONAR_SCANNER_HOME}\\bin\\sonar-scanner -Dsonar.projectKey=my-nodejs-project -Dsonar.sources=. -Dsonar.host.url=http://localhost:9000 -Dsonar.login=${env.SONAR_TOKEN}"
                }
            }
        }
        
        stage('Deploy to Dockers') {
            steps {
                // Build the Docker image
                bat 'docker build -t nodejs-app:latest .'
            }
        }

        stage('Monitoring and Alerting') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'datadog-api-key', variable: 'DATADOG_API_KEY')]) {
                        def datadogApiUrl = 'https://api.datadoghq.com/api/v1/events'
                        def eventPayload = """{
                            "title": "Jenkins Pipeline Alert",
                            "text": "The Jenkins pipeline for project 'my-nodejs-project' has completed.",
                            "priority": "normal",
                            "tags": ["project:my-nodejs-project", "env:production"]
                        }"""
                        
                        httpRequest httpMode: 'POST', 
                                    url: datadogApiUrl, 
                                    contentType: 'APPLICATION_JSON', 
                                    customHeaders: [[name: 'DD-API-KEY', value: "${env.DATADOG_API_KEY}"]],
                                    requestBody: eventPayload
                    }
                }
            }
        }
    }
}
